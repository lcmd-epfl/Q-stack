cell2mol version 2.0
INITIATING cell object from input path: YOXKUS.cif
Debug level: 0
refcell.exist_cif_bond_moiety: True
#########################################
  GETREFS: Generate reference molecules  
  GETREFS: Consistent with CIF moieties  
#########################################
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPLIT COMPLEX: received 4 blocks blocklist=[[49, 50], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [1], [0]]
GETREFS: found 1 reference molecules
GETREFS: ['H24-C23-O-P-I2-Re']
GETREFS: isgood=True
GETREFS: working with H24-C23-O-P-I2-Re with transition metals
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: C-O is connected to Re
GROUP.Get_connected_metals: C is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['C23']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: C ['C']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[1, 2, 3, 4, 5]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Found single cycle in block [1, 2, 3, 4, 5]: [0, 1, 2, 3, 4]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[1, 2, 3, 4, 5], [0]]
LIGAND.Get_connected_metals: H24-C22-P is connected to Re
GROUP.Get_connected_metals: C5 is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
Ring group 5 ['C', 'C', 'C', 'C', 'C']
conn_idx before set: conn_idx=[0, 1, 2, 3, 4]
metal Re (Re1) connected to ['C1', 'C2', 'C3', 'C4', 'C5']
Checking distances for a single ring
Distances: [2.257, 2.265, 2.252, 2.319, 2.332], Mean: 2.285, Std Dev: 0.034, Z-scores: [-0.82352941 -0.58823529 -0.97058824  1.          1.38235294]
Too far indices: [], Very close indices: []
std_dev is too low (0.034), adding all indices to conn_idx
conn_idx: conn_idx=[0, 1, 2, 3, 4]
split_groups: split_groups=[[0, 1, 2, 3, 4]]
final_group_indices: final_group_indices=[[0, 1, 2, 3, 4]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [1, 2, 3, 4, 5]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: C5 ['C', 'C', 'C', 'C', 'C']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0, 1, 2, 3, 4]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [1, 2, 3, 4, 5]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
GROUP.Get_connected_metals: P is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['P1']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: P ['P']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: I is connected to Re
GROUP.Get_connected_metals: I is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['I2']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: I ['I']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: I is connected to Re
GROUP.Get_connected_metals: I is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['I1']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: I ['I']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
METAL.Get_connected_groups: Metal Re (Re1) is connected to group C
METAL.Get_connected_groups: Metal Re (Re1) is connected to group C5
METAL.Get_connected_groups: Metal Re (Re1) is connected to group P
METAL.Get_connected_groups: Metal Re (Re1) is connected to group I
METAL.Get_connected_groups: Metal Re (Re1) is connected to group I
SHAPE_MEASURE: Ideal_shapes: dict_keys(['Pentagon', 'Trigonal bipyramidal', 'Square pyramidal'])
_chemical_name_systematic in CIF: cis-(\h^5^-Tetramethylcyclopentadienylmethylene(diphenyl)phosphine)-carbonyl-diiodo-rhenium(iii)
Reported oxidation states in CIF: [('carbonyl-diiodo-rhenium', 3)]
Moiety dictionaries: [{'formula': 'C23 H24 I2 O1 P1 Re1', 'ratio': 1.0, 'charge': 0, 'type': 'complex'}]
Formulas from CIF: ['H24-C23-O-P-I2-Re']
Ratios from CIF: [1.0]
Charges from CIF: [0]
Formulas from refcell: ['H24-C23-O-P-I2-Re']
ref_idx=0 H24-C23-O-P-I2-Re: Exact match found. H24-C23-O-P-I2-Re
No discrepancies found between formulas from refcell and CIF.
-------------------------------
Errors in hydrogens
-------------------------------
Cell2mol terminated with error number 0. Message:
No errors Found

Ref molecule 0 H24-C23-O-P-I2-Re total charge 0 lowest spin multiplicity 1
Getting unique species in reference
SAVING cell2mol CELL (reference) object to tests/data/cell2mol/Ref_Cell_YOXKUS.cell
Number of symmetry operations: 8
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
Remaining_fragments: ['H8-C10-P', 'H6-C6-O-Re', 'H3-C3', 'H2-C3', 'H3-C', 'I', 'I']
Remaining_fragments: [19, 14, 6, 5, 4, 1, 1]
Remaining_fragments: [0.549, 0.52, 0.599, 0.673, 0.618, 0.545, 0.579]
Hydrogens: ['H', 'H']
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
Remaining_fragments: ['H21-C22-O-P-I2-Re', 'H-C']
Remaining_fragments: [48, 2]
Remaining_fragments: [0.254, 0.454]
Hydrogens: ['H', 'H']
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
Remaining_fragments: ['H8-C10-P', 'H6-C6-O-Re', 'H3-C3', 'H2-C3', 'H3-C', 'I', 'I']
Remaining_fragments: [19, 14, 6, 5, 4, 1, 1]
Remaining_fragments: [0.549, 0.52, 0.599, 0.673, 0.618, 0.545, 0.579]
Hydrogens: ['H', 'H']
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
Remaining_fragments: ['H21-C22-O-P-I2-Re', 'H-C']
Remaining_fragments: [48, 2]
Remaining_fragments: [0.254, 0.454]
Hydrogens: ['H', 'H']
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
All fragments are reconstructed successfully.
Unit Cell Reconstruction Finished Normally. Total execution time: 1.17 seconds
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPLIT COMPLEX: received 4 blocks blocklist=[[30, 31], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50], [47], [48]]
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPLIT COMPLEX: received 4 blocks blocklist=[[45, 46], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50], [1], [0]]
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPLIT COMPLEX: received 4 blocks blocklist=[[30, 31], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50], [47], [48]]
SPECIE.GET_ADJMATRIX: Based on bond information from CIF
SPECIE.GET_METAL_ADJMATRIX: Based on bond information from CIF
SPLIT COMPLEX: received 4 blocks blocklist=[[45, 46], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50], [1], [0]]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: C-O is connected to Re
GROUP.Get_connected_metals: C is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['C23']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: C ['C']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[1, 2, 3, 4, 5]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Found single cycle in block [1, 2, 3, 4, 5]: [1, 0, 2, 3, 4]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[1, 2, 3, 4, 5], [0]]
LIGAND.Get_connected_metals: H24-C22-P is connected to Re
GROUP.Get_connected_metals: C5 is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
Ring group 5 ['C', 'C', 'C', 'C', 'C']
conn_idx before set: conn_idx=[0, 1, 2, 3, 4]
metal Re (Re1) connected to ['C1', 'C5', 'C2', 'C3', 'C4']
Checking distances for a single ring
Distances: [2.257, 2.332, 2.265, 2.252, 2.319], Mean: 2.285, Std Dev: 0.034, Z-scores: [-0.82352941  1.38235294 -0.58823529 -0.97058824  1.        ]
Too far indices: [], Very close indices: []
std_dev is too low (0.034), adding all indices to conn_idx
conn_idx: conn_idx=[0, 1, 2, 3, 4]
split_groups: split_groups=[[0, 1, 2, 3, 4]]
final_group_indices: final_group_indices=[[0, 1, 2, 3, 4]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [1, 2, 19, 20, 21]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: C5 ['C', 'C', 'C', 'C', 'C']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0, 1, 2, 3, 4]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [1, 2, 19, 20, 21]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
GROUP.Get_connected_metals: P is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['P1']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: P ['P']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: I is connected to Re
GROUP.Get_connected_metals: I is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['I2']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: I ['I']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: I is connected to Re
GROUP.Get_connected_metals: I is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['I1']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: I ['I']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
METAL.Get_connected_groups: Metal Re (Re1) is connected to group C
METAL.Get_connected_groups: Metal Re (Re1) is connected to group C5
METAL.Get_connected_groups: Metal Re (Re1) is connected to group P
METAL.Get_connected_groups: Metal Re (Re1) is connected to group I
METAL.Get_connected_groups: Metal Re (Re1) is connected to group I
SHAPE_MEASURE: Ideal_shapes: dict_keys(['Pentagon', 'Trigonal bipyramidal', 'Square pyramidal'])
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: C-O is connected to Re
GROUP.Get_connected_metals: C is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['C23']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: C ['C']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[1, 2, 3, 4, 5]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Found single cycle in block [1, 2, 3, 4, 5]: [0, 1, 2, 3, 4]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[1, 2, 3, 4, 5], [0]]
LIGAND.Get_connected_metals: H24-C22-P is connected to Re
GROUP.Get_connected_metals: C5 is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
Ring group 5 ['C', 'C', 'C', 'C', 'C']
conn_idx before set: conn_idx=[0, 1, 2, 3, 4]
metal Re (Re1) connected to ['C1', 'C2', 'C3', 'C4', 'C5']
Checking distances for a single ring
Distances: [2.257, 2.265, 2.252, 2.319, 2.332], Mean: 2.285, Std Dev: 0.034, Z-scores: [-0.82352941 -0.58823529 -0.97058824  1.          1.38235294]
Too far indices: [], Very close indices: []
std_dev is too low (0.034), adding all indices to conn_idx
conn_idx: conn_idx=[0, 1, 2, 3, 4]
split_groups: split_groups=[[0, 1, 2, 3, 4]]
final_group_indices: final_group_indices=[[0, 1, 2, 3, 4]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [1, 2, 3, 4, 5]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: C5 ['C', 'C', 'C', 'C', 'C']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0, 1, 2, 3, 4]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [1, 2, 3, 4, 5]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
GROUP.Get_connected_metals: P is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['P1']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: P ['P']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: I is connected to Re
GROUP.Get_connected_metals: I is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['I2']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: I ['I']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: I is connected to Re
GROUP.Get_connected_metals: I is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['I1']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: I ['I']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
METAL.Get_connected_groups: Metal Re (Re1) is connected to group C
METAL.Get_connected_groups: Metal Re (Re1) is connected to group C5
METAL.Get_connected_groups: Metal Re (Re1) is connected to group P
METAL.Get_connected_groups: Metal Re (Re1) is connected to group I
METAL.Get_connected_groups: Metal Re (Re1) is connected to group I
SHAPE_MEASURE: Ideal_shapes: dict_keys(['Pentagon', 'Trigonal bipyramidal', 'Square pyramidal'])
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: C-O is connected to Re
GROUP.Get_connected_metals: C is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['C23']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: C ['C']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[1, 2, 3, 4, 5]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Found single cycle in block [1, 2, 3, 4, 5]: [1, 0, 2, 3, 4]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[1, 2, 3, 4, 5], [0]]
LIGAND.Get_connected_metals: H24-C22-P is connected to Re
GROUP.Get_connected_metals: C5 is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
Ring group 5 ['C', 'C', 'C', 'C', 'C']
conn_idx before set: conn_idx=[0, 1, 2, 3, 4]
metal Re (Re1) connected to ['C1', 'C5', 'C2', 'C3', 'C4']
Checking distances for a single ring
Distances: [2.257, 2.332, 2.265, 2.252, 2.319], Mean: 2.285, Std Dev: 0.034, Z-scores: [-0.82352941  1.38235294 -0.58823529 -0.97058824  1.        ]
Too far indices: [], Very close indices: []
std_dev is too low (0.034), adding all indices to conn_idx
conn_idx: conn_idx=[0, 1, 2, 3, 4]
split_groups: split_groups=[[0, 1, 2, 3, 4]]
final_group_indices: final_group_indices=[[0, 1, 2, 3, 4]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [1, 2, 19, 20, 21]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: C5 ['C', 'C', 'C', 'C', 'C']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0, 1, 2, 3, 4]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [1, 2, 19, 20, 21]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
GROUP.Get_connected_metals: P is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['P1']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: P ['P']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: I is connected to Re
GROUP.Get_connected_metals: I is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['I2']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: I ['I']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: I is connected to Re
GROUP.Get_connected_metals: I is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['I1']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: I ['I']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
METAL.Get_connected_groups: Metal Re (Re1) is connected to group C
METAL.Get_connected_groups: Metal Re (Re1) is connected to group C5
METAL.Get_connected_groups: Metal Re (Re1) is connected to group P
METAL.Get_connected_groups: Metal Re (Re1) is connected to group I
METAL.Get_connected_groups: Metal Re (Re1) is connected to group I
SHAPE_MEASURE: Ideal_shapes: dict_keys(['Pentagon', 'Trigonal bipyramidal', 'Square pyramidal'])
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: C-O is connected to Re
GROUP.Get_connected_metals: C is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['C23']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: C ['C']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[1, 2, 3, 4, 5]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Found single cycle in block [1, 2, 3, 4, 5]: [0, 1, 2, 3, 4]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[1, 2, 3, 4, 5], [0]]
LIGAND.Get_connected_metals: H24-C22-P is connected to Re
GROUP.Get_connected_metals: C5 is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
Ring group 5 ['C', 'C', 'C', 'C', 'C']
conn_idx before set: conn_idx=[0, 1, 2, 3, 4]
metal Re (Re1) connected to ['C1', 'C2', 'C3', 'C4', 'C5']
Checking distances for a single ring
Distances: [2.257, 2.265, 2.252, 2.319, 2.332], Mean: 2.285, Std Dev: 0.034, Z-scores: [-0.82352941 -0.58823529 -0.97058824  1.          1.38235294]
Too far indices: [], Very close indices: []
std_dev is too low (0.034), adding all indices to conn_idx
conn_idx: conn_idx=[0, 1, 2, 3, 4]
split_groups: split_groups=[[0, 1, 2, 3, 4]]
final_group_indices: final_group_indices=[[0, 1, 2, 3, 4]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [1, 2, 3, 4, 5]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: C5 ['C', 'C', 'C', 'C', 'C']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0, 1, 2, 3, 4]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [1, 2, 3, 4, 5]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
GROUP.Get_connected_metals: P is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['P1']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: P ['P']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: I is connected to Re
GROUP.Get_connected_metals: I is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['I2']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: I ['I']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
		CHECK_blocklist: block=[0]
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
		CHECK_blocklist: Final new_blocklist: [[0]]
LIGAND.Get_connected_metals: I is connected to Re
GROUP.Get_connected_metals: I is connected to Re
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=False
conn_idx before set: conn_idx=[0]
conn_idx_by_metal: conn_idx_by_metal={0: [0]}
metal Re (Re1) connected to ['I1']
conn_idx: conn_idx=[0]
split_groups: split_groups=[[0]]
final_group_indices: final_group_indices=[[0]]
final_ligand_indices_by_metal: final_ligand_indices_by_metal={0: [0]}
group_metals_indices: group_metals_indices=[[0]]
	LIGAND.SPLIT_LIGAND: I ['I']
	LIGAND.SPLIT_LIGAND: final_group_indices=[[0]]
	LIGAND.SPLIT_LIGAND: final_ligand_indices={0: [0]}
	LIGAND.SPLIT_LIGAND: group_metals_indices=[[0]]
METAL.Get_connected_groups: Metal Re (Re1) is connected to group C
METAL.Get_connected_groups: Metal Re (Re1) is connected to group C5
METAL.Get_connected_groups: Metal Re (Re1) is connected to group P
METAL.Get_connected_groups: Metal Re (Re1) is connected to group I
METAL.Get_connected_groups: Metal Re (Re1) is connected to group I
SHAPE_MEASURE: Ideal_shapes: dict_keys(['Pentagon', 'Trigonal bipyramidal', 'Square pyramidal'])
-------------------------------
Errors in reconstruction
-------------------------------
Cell2mol terminated with error number 0. Message:
No errors Found

Get possible charge states for unique specie C-O
SPECIE.GET_POSSIBLE_CS: C-O self.protonation_states=None
	Element: C, Count: 1, possible valences: [4, 2], Combinations 1
	Element: O, Count: 1, possible valences: [2, 1, 3], Combinations 1
	Total count of elements: {6: 1, 8: 1}, Total combinations in xyz2mol 2
reset_H_indices=[]
PROTONATION.get_adjmatrix_from_cif_bonds (2, 2) (2,)
SPECIE.GET_POSSIBLE_CS: Obtained C-O self.protonation_states=[------------- Cell2mol Protonation ----------------
 Status                          = True
 Labels                          = ['C', 'O']
 Atom site labels                = ['C23', 'O1']
 Type                            = Local
 Atoms added in positions        = [0, 0]
 Atoms blocked (no atoms added)  = [1, 0]
---------------------------------------------------
]
GET_POSSIBLE_CHARGE_STATE: C-O (ligand) (len(spec.protonation_states)=1)
GET_POSSIBLE_CHARGE_STATE: Found len(sorted_valences_list)=3 for this specie C-O (ligand)

GET_CHARGE. Starting get_charge with charge 0 and C-O prot.status=True prot.added_atoms=0 allow_charged_fragments=True
	AC2BO: formula='C-O' len(sorted_valences_list)=3 max_count=3
GET_CHARGE. xyz2mol took 0.002 seconds C-O
CHECK_POSSIBLE_RESONANCE: C-O len(possible_res_mols)=1
Best candidate: [C-]#[O+]
Original      : [C-]#[O+]
    NEW SELECT FUNCTION: coordinating_atoms_indices=[0]
    NEW SELECT FUNCTION: added_indices=[]
CHECK_POSSIBLE_RESONANCE: C-O len(possible_res_mols)=1
Best candidate: [C-]#[O+]
Original      : [C-]#[O+]
Get possible charge states for unique specie H24-C22-P
SPECIE.GET_POSSIBLE_CS: H24-C22-P self.protonation_states=None
	Element: H, Count: 24, possible valences: [1], Combinations 24
	Element: C, Count: 22, possible valences: [4, 2], Combinations 484
	Element: P, Count: 1, possible valences: [3, 5], Combinations 1
	Total count of elements: {1: 24, 6: 22, 15: 1}, Total combinations in xyz2mol 509
        GET_PROTONATION_STATES: Adding H to 1 with label C
get_adjmatrix: metal_idxs=[], alkali_alkaline_earth_metal_idxs=[], metal_only=False, add_atoms=True
reset_H_indices=[]
PROTONATION.get_adjmatrix_from_cif_bonds (48, 48) (48,)
PROTONATION.added_idx idx=1 added_idx=47
SPECIE.GET_POSSIBLE_CS: Obtained H24-C22-P self.protonation_states=[------------- Cell2mol Protonation ----------------
 Status                          = True
 Labels                          = ['P', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'C', 'H', 'H', 'H', 'C', 'H', 'H', 'H', 'C', 'H', 'H', 'H', 'C', 'H', 'H', 'C', 'C', 'H', 'C', 'H', 'C', 'H', 'C', 'H', 'C', 'H', 'C', 'C', 'H', 'C', 'H', 'C', 'H', 'C', 'H', 'C', 'H', 'H']
 Atom site labels                = ['P1', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'H1', 'H2', 'H3', 'C7', 'H4', 'H5', 'H6', 'C8', 'H7', 'H8', 'H9', 'C9', 'H10', 'H11', 'H12', 'C10', 'H13', 'H14', 'C11', 'C12', 'H15', 'C13', 'H16', 'C14', 'H17', 'C15', 'H18', 'C16', 'H19', 'C17', 'C18', 'H20', 'C19', 'H21', 'C20', 'H22', 'C21', 'H23', 'C22', 'H24']
 Type                            = Local
 Atoms added in positions        = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 Atoms blocked (no atoms added)  = [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
---------------------------------------------------
]
GET_POSSIBLE_CHARGE_STATE: H24-C22-P (ligand) (len(spec.protonation_states)=1)
GET_POSSIBLE_CHARGE_STATE: Found len(sorted_valences_list)=2 for this specie H24-C22-P (ligand)

GET_CHARGE. Starting get_charge with charge 0 and H25-C22-P prot.status=True prot.added_atoms=1 allow_charged_fragments=True
	AC2BO: formula='H25-C22-P' len(sorted_valences_list)=2 max_count=2
	AC2BO: formula='H25-C22-P' status=True charge=0 count=0
GET_CHARGE. xyz2mol took 0.002 seconds H25-C22-P
CHECK_POSSIBLE_RESONANCE: H24-C22-P len(possible_res_mols)=1
Best candidate: [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])C2([H])C(C([H])([H])[H])=C(C([H])([H])[H])C(C([H])([H])[H])=C2C([H])([H])[H])c([H])c1[H]
Original      : [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])C2([H])C(C([H])([H])[H])=C(C([H])([H])[H])C(C([H])([H])[H])=C2C([H])([H])[H])c([H])c1[H]
    NEW SELECT FUNCTION: coordinating_atoms_indices=[0, 1, 2, 3, 4, 5]
    NEW SELECT FUNCTION: added_indices=[1]
CHECK_POSSIBLE_RESONANCE: H24-C22-P len(possible_res_mols)=1
Best candidate: [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])C2([H])C(C([H])([H])[H])=C(C([H])([H])[H])C(C([H])([H])[H])=C2C([H])([H])[H])c([H])c1[H]
Original      : [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])C2([H])C(C([H])([H])[H])=C(C([H])([H])[H])C(C([H])([H])[H])=C2C([H])([H])[H])c([H])c1[H]
Get possible charge states for unique specie I
SPECIE.GET_POSSIBLE_CS: I self.protonation_states=None
	Element: I, Count: 1, possible valences: [1], Combinations 1
	Total count of elements: {53: 1}, Total combinations in xyz2mol 1
reset_H_indices=[]
PROTONATION.get_adjmatrix_from_cif_bonds (1, 1) (1,)
SPECIE.GET_POSSIBLE_CS: Obtained I self.protonation_states=[------------- Cell2mol Protonation ----------------
 Status                          = True
 Labels                          = ['I']
 Atom site labels                = ['I2']
 Type                            = Local
 Atoms added in positions        = [0]
 Atoms blocked (no atoms added)  = [0]
---------------------------------------------------
]
GET_POSSIBLE_CHARGE_STATE: I (ligand) (len(spec.protonation_states)=1)
GET_POSSIBLE_CHARGE_STATE: Found len(sorted_valences_list)=1 for this specie I (ligand)

GET_CHARGE. Starting get_charge with charge -1 and I prot.status=True prot.added_atoms=0 allow_charged_fragments=True
	AC2BO: formula='I' len(sorted_valences_list)=1 max_count=1
GET_CHARGE. xyz2mol took 0.000 seconds I
CHECK_POSSIBLE_RESONANCE: I len(possible_res_mols)=1
Best candidate: [I-]
Original      : [I-]
    NEW SELECT FUNCTION: coordinating_atoms_indices=[0]
    NEW SELECT FUNCTION: added_indices=[]
CHECK_POSSIBLE_RESONANCE: I len(possible_res_mols)=1
Best candidate: [I-]
Original      : [I-]
Get possible charge states for unique specie Re
Get possible charge states for species list C-O
Get possible charge states for species list H24-C22-P
Get possible charge states for species list I
Get possible charge states for species list I
SPECIE.GET_POSSIBLE_CS: I self.protonation_states=None
	Element: I, Count: 1, possible valences: [1], Combinations 1
	Total count of elements: {53: 1}, Total combinations in xyz2mol 1
reset_H_indices=[]
PROTONATION.get_adjmatrix_from_cif_bonds (1, 1) (1,)
SPECIE.GET_POSSIBLE_CS: Obtained I self.protonation_states=[------------- Cell2mol Protonation ----------------
 Status                          = True
 Labels                          = ['I']
 Atom site labels                = ['I1']
 Type                            = Local
 Atoms added in positions        = [0]
 Atoms blocked (no atoms added)  = [0]
---------------------------------------------------
]
GET_POSSIBLE_CHARGE_STATE: I (ligand) (len(spec.protonation_states)=1)
GET_POSSIBLE_CHARGE_STATE: Found len(sorted_valences_list)=1 for this specie I (ligand)

GET_CHARGE. Starting get_charge with charge -1 and I prot.status=True prot.added_atoms=0 allow_charged_fragments=True
	AC2BO: formula='I' len(sorted_valences_list)=1 max_count=1
GET_CHARGE. xyz2mol took 0.000 seconds I
CHECK_POSSIBLE_RESONANCE: I len(possible_res_mols)=1
Best candidate: [I-]
Original      : [I-]
    NEW SELECT FUNCTION: coordinating_atoms_indices=[0]
    NEW SELECT FUNCTION: added_indices=[]
CHECK_POSSIBLE_RESONANCE: I len(possible_res_mols)=1
Best candidate: [I-]
Original      : [I-]
Get possible charge states for species list Re
SET_CHARGE_STATE: mode=1 target.formula='C-O' target.possible_cs=[------------- Cell2mol Charge State ---------------
 Status                          = True
 Smiles                          = [C-]#[O+]
 Charge Tried                    = 0
 Uncorrected Total Charge        = 0
 Corrected Total Charge          = 0
 Corrected Absolute Total Charge = 2
 Corrected Is Zwitterion?        = True
---------------------------------------------------
]
[0] 0 [------------- Cell2mol Charge State ---------------
 Status                          = True
 Smiles                          = [C-]#[O+]
 Charge Tried                    = 0
 Uncorrected Total Charge        = 0
 Corrected Total Charge          = 0
 Corrected Absolute Total Charge = 2
 Corrected Is Zwitterion?        = True
---------------------------------------------------
]
SET_CHARGE_STATE!!!! mode=1 ------------- Cell2mol Charge State ---------------
 Status                          = True
 Smiles                          = [C-]#[O+]
 Charge Tried                    = 0
 Uncorrected Total Charge        = 0
 Corrected Total Charge          = 0
 Corrected Absolute Total Charge = 2
 Corrected Is Zwitterion?        = True
---------------------------------------------------
 [C-]#[O+]
SET_CHARGE_STATE:target.formula='C-O' target.totcharge=0 target.smiles='[C-]#[O+]'
SET_CHARGE_STATE: mode=1 target.formula='H24-C22-P' target.possible_cs=[------------- Cell2mol Charge State ---------------
 Status                          = True
 Smiles                          = [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])C2([H])C(C([H])([H])[H])=C(C([H])([H])[H])C(C([H])([H])[H])=C2C([H])([H])[H])c([H])c1[H]
 Charge Tried                    = 0
 Uncorrected Total Charge        = 0
 Corrected Total Charge          = -1
 Corrected Absolute Total Charge = 1
 Corrected Is Zwitterion?        = False
---------------------------------------------------
]
[-1] -1 [------------- Cell2mol Charge State ---------------
 Status                          = True
 Smiles                          = [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])C2([H])C(C([H])([H])[H])=C(C([H])([H])[H])C(C([H])([H])[H])=C2C([H])([H])[H])c([H])c1[H]
 Charge Tried                    = 0
 Uncorrected Total Charge        = 0
 Corrected Total Charge          = -1
 Corrected Absolute Total Charge = 1
 Corrected Is Zwitterion?        = False
---------------------------------------------------
]
SET_CHARGE_STATE!!!! mode=1 ------------- Cell2mol Charge State ---------------
 Status                          = True
 Smiles                          = [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])C2([H])C(C([H])([H])[H])=C(C([H])([H])[H])C(C([H])([H])[H])=C2C([H])([H])[H])c([H])c1[H]
 Charge Tried                    = 0
 Uncorrected Total Charge        = 0
 Corrected Total Charge          = -1
 Corrected Absolute Total Charge = 1
 Corrected Is Zwitterion?        = False
---------------------------------------------------
 [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])C2([H])C(C([H])([H])[H])=C(C([H])([H])[H])C(C([H])([H])[H])=C2C([H])([H])[H])c([H])c1[H]
SET_CHARGE_STATE:target.formula='H24-C22-P' target.totcharge=-1 target.smiles='[H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])C2([H])C(C([H])([H])[H])=C(C([H])([H])[H])C(C([H])([H])[H])=C2C([H])([H])[H])c([H])c1[H]'
SET_CHARGE_STATE: mode=1 target.formula='I' target.possible_cs=[------------- Cell2mol Charge State ---------------
 Status                          = True
 Smiles                          = [I-]
 Charge Tried                    = -1
 Uncorrected Total Charge        = -1
 Corrected Total Charge          = -1
 Corrected Absolute Total Charge = 1
 Corrected Is Zwitterion?        = False
---------------------------------------------------
]
[-1] -1 [------------- Cell2mol Charge State ---------------
 Status                          = True
 Smiles                          = [I-]
 Charge Tried                    = -1
 Uncorrected Total Charge        = -1
 Corrected Total Charge          = -1
 Corrected Absolute Total Charge = 1
 Corrected Is Zwitterion?        = False
---------------------------------------------------
]
SET_CHARGE_STATE!!!! mode=1 ------------- Cell2mol Charge State ---------------
 Status                          = True
 Smiles                          = [I-]
 Charge Tried                    = -1
 Uncorrected Total Charge        = -1
 Corrected Total Charge          = -1
 Corrected Absolute Total Charge = 1
 Corrected Is Zwitterion?        = False
---------------------------------------------------
 [I-]
SET_CHARGE_STATE:target.formula='I' target.totcharge=-1 target.smiles='[I-]'
SET_CHARGE_STATE: mode=1 target.formula='I' target.possible_cs=[------------- Cell2mol Charge State ---------------
 Status                          = True
 Smiles                          = [I-]
 Charge Tried                    = -1
 Uncorrected Total Charge        = -1
 Corrected Total Charge          = -1
 Corrected Absolute Total Charge = 1
 Corrected Is Zwitterion?        = False
---------------------------------------------------
]
[-1] -1 [------------- Cell2mol Charge State ---------------
 Status                          = True
 Smiles                          = [I-]
 Charge Tried                    = -1
 Uncorrected Total Charge        = -1
 Corrected Total Charge          = -1
 Corrected Absolute Total Charge = 1
 Corrected Is Zwitterion?        = False
---------------------------------------------------
]
SET_CHARGE_STATE!!!! mode=1 ------------- Cell2mol Charge State ---------------
 Status                          = True
 Smiles                          = [I-]
 Charge Tried                    = -1
 Uncorrected Total Charge        = -1
 Corrected Total Charge          = -1
 Corrected Absolute Total Charge = 1
 Corrected Is Zwitterion?        = False
---------------------------------------------------
 [I-]
SET_CHARGE_STATE:target.formula='I' target.totcharge=-1 target.smiles='[I-]'
ASSIGN_CHARGES: Refenrence Molecule 0: H24-C23-O-P-I2-Re
ASSIGN_CHARGES: Complex 0 H24-C23-O-P-I2-Re 0
ASSIGN_CHARGES: Ligand 0 0 C-O 0 [C-]#[O+]
ASSIGN_CHARGES: Ligand 0 1 H24-C22-P -1 [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]
ASSIGN_CHARGES: Ligand 0 2 I -1 [I-]
ASSIGN_CHARGES: Ligand 0 3 I -1 [I-]
ASSIGN_CHARGES: Metal 0 0 Re 3
ASSIGN_CHARGES: Unitcell Molecule 0: H24-C23-O-P-I2-Re
SET_CHARGE_STATE: mode=2 reference.smiles='[C-]#[O+]' [C-]#[O+]
SET_CHARGE_STATE: smiles='[C-]#[O+]' final_charge=0
SET_CHARGE_STATE:target.formula='C-O' target.totcharge=0 target.smiles='[C-]#[O+]'
SET_CHARGE_STATE: mode=2 reference.smiles='[H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]' [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]
SET_CHARGE_STATE: smiles='[H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]' final_charge=-1
SET_CHARGE_STATE:target.formula='H24-C22-P' target.totcharge=-1 target.smiles='[H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]'
SET_CHARGE_STATE: mode=2 reference.smiles='[I-]' [I-]
SET_CHARGE_STATE: smiles='[I-]' final_charge=-1
SET_CHARGE_STATE:target.formula='I' target.totcharge=-1 target.smiles='[I-]'
SET_CHARGE_STATE: mode=2 reference.smiles='[I-]' [I-]
SET_CHARGE_STATE: smiles='[I-]' final_charge=-1
SET_CHARGE_STATE:target.formula='I' target.totcharge=-1 target.smiles='[I-]'
ASSIGN_CHARGES: Unitcell Molecule 1: H24-C23-O-P-I2-Re
SET_CHARGE_STATE: mode=2 reference.smiles='[C-]#[O+]' [C-]#[O+]
SET_CHARGE_STATE: smiles='[C-]#[O+]' final_charge=0
SET_CHARGE_STATE:target.formula='C-O' target.totcharge=0 target.smiles='[C-]#[O+]'
SET_CHARGE_STATE: mode=2 reference.smiles='[H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]' [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]
SET_CHARGE_STATE: smiles='[H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]' final_charge=-1
SET_CHARGE_STATE:target.formula='H24-C22-P' target.totcharge=-1 target.smiles='[H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]'
SET_CHARGE_STATE: mode=2 reference.smiles='[I-]' [I-]
SET_CHARGE_STATE: smiles='[I-]' final_charge=-1
SET_CHARGE_STATE:target.formula='I' target.totcharge=-1 target.smiles='[I-]'
SET_CHARGE_STATE: mode=2 reference.smiles='[I-]' [I-]
SET_CHARGE_STATE: smiles='[I-]' final_charge=-1
SET_CHARGE_STATE:target.formula='I' target.totcharge=-1 target.smiles='[I-]'
ASSIGN_CHARGES: Unitcell Molecule 2: H24-C23-O-P-I2-Re
SET_CHARGE_STATE: mode=2 reference.smiles='[C-]#[O+]' [C-]#[O+]
SET_CHARGE_STATE: smiles='[C-]#[O+]' final_charge=0
SET_CHARGE_STATE:target.formula='C-O' target.totcharge=0 target.smiles='[C-]#[O+]'
SET_CHARGE_STATE: mode=2 reference.smiles='[H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]' [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]
SET_CHARGE_STATE: smiles='[H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]' final_charge=-1
SET_CHARGE_STATE:target.formula='H24-C22-P' target.totcharge=-1 target.smiles='[H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]'
SET_CHARGE_STATE: mode=2 reference.smiles='[I-]' [I-]
SET_CHARGE_STATE: smiles='[I-]' final_charge=-1
SET_CHARGE_STATE:target.formula='I' target.totcharge=-1 target.smiles='[I-]'
SET_CHARGE_STATE: mode=2 reference.smiles='[I-]' [I-]
SET_CHARGE_STATE: smiles='[I-]' final_charge=-1
SET_CHARGE_STATE:target.formula='I' target.totcharge=-1 target.smiles='[I-]'
ASSIGN_CHARGES: Unitcell Molecule 3: H24-C23-O-P-I2-Re
SET_CHARGE_STATE: mode=2 reference.smiles='[C-]#[O+]' [C-]#[O+]
SET_CHARGE_STATE: smiles='[C-]#[O+]' final_charge=0
SET_CHARGE_STATE:target.formula='C-O' target.totcharge=0 target.smiles='[C-]#[O+]'
SET_CHARGE_STATE: mode=2 reference.smiles='[H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]' [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]
SET_CHARGE_STATE: smiles='[H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]' final_charge=-1
SET_CHARGE_STATE:target.formula='H24-C22-P' target.totcharge=-1 target.smiles='[H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]'
SET_CHARGE_STATE: mode=2 reference.smiles='[I-]' [I-]
SET_CHARGE_STATE: smiles='[I-]' final_charge=-1
SET_CHARGE_STATE:target.formula='I' target.totcharge=-1 target.smiles='[I-]'
SET_CHARGE_STATE: mode=2 reference.smiles='[I-]' [I-]
SET_CHARGE_STATE: smiles='[I-]' final_charge=-1
SET_CHARGE_STATE:target.formula='I' target.totcharge=-1 target.smiles='[I-]'
ASSIGN_CHARGES: Unitcell Molecule 0: H24-C23-O-P-I2-Re
ASSIGN_CHARGES: Complex 0 H24-C23-O-P-I2-Re 0
ASSIGN_CHARGES: Ligand 0 0 C-O 0 [C-]#[O+]
ASSIGN_CHARGES: Ligand 0 1 H24-C22-P -1 [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]
ASSIGN_CHARGES: Ligand 0 2 I -1 [I-]
ASSIGN_CHARGES: Ligand 0 3 I -1 [I-]
ASSIGN_CHARGES: Metal 0 0 Re 3
ASSIGN_CHARGES: Unitcell Molecule 1: H24-C23-O-P-I2-Re
ASSIGN_CHARGES: Complex 1 H24-C23-O-P-I2-Re 0
ASSIGN_CHARGES: Ligand 1 0 C-O 0 [C-]#[O+]
ASSIGN_CHARGES: Ligand 1 1 H24-C22-P -1 [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]
ASSIGN_CHARGES: Ligand 1 2 I -1 [I-]
ASSIGN_CHARGES: Ligand 1 3 I -1 [I-]
ASSIGN_CHARGES: Metal 1 0 Re 3
ASSIGN_CHARGES: Unitcell Molecule 2: H24-C23-O-P-I2-Re
ASSIGN_CHARGES: Complex 2 H24-C23-O-P-I2-Re 0
ASSIGN_CHARGES: Ligand 2 0 C-O 0 [C-]#[O+]
ASSIGN_CHARGES: Ligand 2 1 H24-C22-P -1 [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]
ASSIGN_CHARGES: Ligand 2 2 I -1 [I-]
ASSIGN_CHARGES: Ligand 2 3 I -1 [I-]
ASSIGN_CHARGES: Metal 2 0 Re 3
ASSIGN_CHARGES: Unitcell Molecule 3: H24-C23-O-P-I2-Re
ASSIGN_CHARGES: Complex 3 H24-C23-O-P-I2-Re 0
ASSIGN_CHARGES: Ligand 3 0 C-O 0 [C-]#[O+]
ASSIGN_CHARGES: Ligand 3 1 H24-C22-P -1 [H]c1c([H])c([H])c(P(c2c([H])c([H])c([H])c([H])c2[H])C([H])([H])[c-]2c(C([H])([H])[H])c(C([H])([H])[H])c(C([H])([H])[H])c2C([H])([H])[H])c([H])c1[H]
ASSIGN_CHARGES: Ligand 3 2 I -1 [I-]
ASSIGN_CHARGES: Ligand 3 3 I -1 [I-]
ASSIGN_CHARGES: Metal 3 0 Re 3
Charge Assignment Finished Normally. Total execution time: 0.13 seconds
-------------------------------
Errors in charge assignment
-------------------------------
Cell2mol terminated with error number 0. Message:
No errors Found

SAVING cell2mol CELL (reference) object to tests/data/cell2mol/Ref_Cell_YOXKUS.cell
SAVING cell2mol CELL (unitcell) object to tests/data/cell2mol/Cell_YOXKUS.cell
